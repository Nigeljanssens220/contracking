/**
 * Utility functions for generating and downloading checklist content
 */

export interface ChecklistItem {
  text: string;
  category?: string;
  subcategory?: string;
}

export interface ChecklistData {
  title: string;
  description?: string;
  sections: Array<{
    title: string;
    items: ChecklistItem[];
  }>;
  footer?: string;
}

/**
 * Generates a formatted text version of a checklist
 */
export function generateChecklistText(data: ChecklistData): string {
  let content = `${data.title}\n`;
  content += "=".repeat(data.title.length) + "\n\n";

  if (data.description) {
    content += `${data.description}\n\n`;
  }

  data.sections.forEach((section, index) => {
    content += `${index + 1}. ${section.title}\n`;
    content += "-".repeat(section.title.length + 3) + "\n";

    section.items.forEach((item) => {
      content += `‚òê ${item.text}\n`;
    });
    content += "\n";
  });

  if (data.footer) {
    content += `${data.footer}\n`;
  }

  content += "\n---\n";
  content += "Generated by Contracking.me - Free Contraction Timer\n";
  content += "https://contracking.me\n";

  return content;
}

/**
 * Triggers a download of text content as a file
 */
export function downloadTextFile(content: string, filename: string): void {
  const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Generates HTML content for printing
 */
export function generatePrintableHTML(data: ChecklistData): string {
  let html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${data.title}</title>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      line-height: 1.6; 
      max-width: 800px; 
      margin: 0 auto; 
      padding: 20px;
      color: #333;
    }
    h1 { 
      color: #2563eb; 
      border-bottom: 3px solid #2563eb; 
      padding-bottom: 10px; 
    }
    h2 { 
      color: #1e40af; 
      margin-top: 30px; 
    }
    .checklist-item { 
      margin: 8px 0; 
      padding: 5px 0;
    }
    .checkbox { 
      width: 18px; 
      height: 18px; 
      border: 2px solid #666; 
      display: inline-block; 
      margin-right: 10px; 
      vertical-align: middle;
    }
    .footer { 
      margin-top: 40px; 
      padding-top: 20px; 
      border-top: 1px solid #ccc; 
      text-align: center; 
      color: #666; 
      font-size: 12px;
    }
    @media print {
      body { margin: 0; padding: 15px; }
      .no-print { display: none; }
    }
  </style>
</head>
<body>
  <h1>${data.title}</h1>
  ${data.description ? `<p><em>${data.description}</em></p>` : ""}
  
  ${data.sections
    .map(
      (section) => `
    <h2>${section.title}</h2>
    ${section.items
      .map(
        (item) => `
      <div class="checklist-item">
        <span class="checkbox"></span>
        ${item.text}
      </div>
    `
      )
      .join("")}
  `
    )
    .join("")}
  
  <div class="footer">
    ${data.footer || ""}
    <br><br>
    Generated by Contracking.me - Free Contraction Timer<br>
    https://contracking.me
  </div>
</body>
</html>`;

  return html;
}

/**
 * Opens a printable version of the checklist in a new window
 */
export function printChecklist(data: ChecklistData): void {
  const html = generatePrintableHTML(data);
  const printWindow = window.open("", "_blank");
  if (printWindow) {
    printWindow.document.write(html);
    printWindow.document.close();
    printWindow.focus();
    // Auto-trigger print dialog after a short delay
    setTimeout(() => {
      printWindow.print();
    }, 500);
  }
}

/**
 * Downloads checklist as a text file
 */
export function downloadChecklist(
  data: ChecklistData,
  format: "txt" | "html" = "txt"
): void {
  if (format === "txt") {
    const content = generateChecklistText(data);
    const filename = `${data.title
      .toLowerCase()
      .replace(/[^a-z0-9]/g, "-")}.txt`;
    downloadTextFile(content, filename);
  } else {
    const content = generatePrintableHTML(data);
    const filename = `${data.title
      .toLowerCase()
      .replace(/[^a-z0-9]/g, "-")}.html`;
    const blob = new Blob([content], { type: "text/html;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
}

